vim9script

# {{{ Settings
var mapleader = "\\"
set nocompatible               # No Vi support
filetype plugin indent on
syntax on

## Vim options

set hidden                     # Allow hidden buffers
set scrolloff=5                # Keep space around the cursor line
set spelllang=en,nl            # default to English and Dutch
set thesaurus+=/home/jiska/.vim/thesaurus/english.txt

set autoindent                 # Indented text
set noautoread                 # Pick up external changes to files
set noautowrite                # Write files when navigating with :next/:previous
set background=dark            # Dark background by default
set backspace=indent,eol,start
set belloff=all                # Bells are annoying
set breakindent                # Wrap long lines *with* indentation
set breakindentopt=shift:2,min:5,sbr
# set clipboard=unnamed,unnamedplus
set colorcolumn=81,82          # Highlight 81 and 82 columns
set conceallevel=0             # Always show text normally
set complete=.,w,b,u,t         # Sources for term and line completions
set completeopt=menu,menuone,noinsert,noselect
set dictionary=/usr/share/dict/words
set expandtab                  # Use spaces instead of tabs
set fillchars+=vert:â”‚
set foldlevelstart=20
set foldmethod=indent          # Simple and fast
set formatoptions=qjnlro       # Format options
set history=200                # Keep 200 changes of undo history
set infercase                  # Smart casing when completing
set ignorecase                 # Search in case-insensitively
set noincsearch                # Dont go to search results immediately
set laststatus=1               # Dont need a statusline for one window
set cmdheight=3                # More room for the status line
set matchtime=5                # blink matching brackets for 5 tenths of a second
set matchpairs=(:),{:},[:]
# set mouse=""                   # No mouse support in the terminal
set mousehide                  # Hide mouse when typing text
set nobackup                   # Backup files
set noexrc                     # Disable reading of working directory vimrc files
set hlsearch                   # Highlight search results by default
set noshowmatch                # No jumping jumping cursors when matching pairs
set showmode                   # No to showing mode in bottom-left corner
set showcmd                    # Show keypresses in bottom-right
set swapfile                   # Use a swapfile for unsaved changes
set dir=~/.vim/swap,.          # Store swapfiles here
set wrapscan                   # Don't wrap searches around
set nonumber                   # No line numbers
set path=.,**/*                # Recursively search subdirectories
set wildignore+=**/env/**      # But dont look in virtualenvs
set wildignore+=**/venv/**
set wildignore+=**/.git/**     #     ...git repos
set wildignore+=**/node_modules/** # ...npm directories
set pumheight=20               # Height of complete list
set relativenumber             # Relative numbers
set noruler                    # No ruler with column, row, percentage
set shiftwidth=2               # Default indentation amount
set shortmess=finxToOcImrwsS   # So dont use SlstWAqF
set showmatch                  # show matching brackets
set signcolumn=number          # Render signs in the number column
set showbreak=âˆ™
set smartcase                  # Case-smart searching
set smarttab                   # Tab at the start of line inserts blanks
set showtabline=0              # We dont need a tab line
set spelloptions=camel         # When spell checking, assume word boundaries include 'CamelCasing'.
set splitbelow                 # Split below current window
set splitright                 # Split window to the right
set tabstop=4                  # Tab width
set termguicolors              # Enable 24-bit color support for terminal Vim
set textwidth=80               # Standard width before breaking
set undofile                   # Maintain undo history
set undodir^=~/.vim/undo//
set updatetime=1000            # Certain plugins use this for CursorHold event triggering
set viminfo=%,'50,/50,:50
set viminfofile=.git/viminfo
set wildcharm=<Tab>            # Defines the trigger for 'wildmenu' in mappings
set wildmenu                   # Nice command completions
set wildmode=longest:full
set wildoptions=
set nowrap                     # Do not wrap long lines
set cryptmethod=blowfish2
set listchars=eol:$,tab:>-,trail:-
set nocursorline
set cursorlineopt=both         # line number and buffer line
set keywordprg=:DictPrg
set splitkeep=screen
# bug fix where elvish shell needs a space around the redirect, and bash accepts
# both. Fixes netrw-gx command
set shellredir=\ \>\ 
set shell=/usr/bin/sh          # Use something POSIX compattible
# }}}

# {{{ Functions
def g:StylePrg(): void
  :%y
  new
  normal p
  setlocal nobuflisted
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal noswapfile
  :%!style
enddef

def g:DictPrg(lookup: string): void
  new
  execute 'silent read !dict -d english ' .. lookup
  setlocal nobuflisted
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal noswapfile
  normal gg
enddef
command -nargs=1 DictPrg call DictPrg(<f-args>)

func GitGrep(...)
  var save = &grepprg
  set grepprg=git\ grep\ -n\ $*
  var s = 'grep'
  for i in a:000
    let s = s . ' ' . i
  endfor
  exe s
  let &grepprg = save
endfun
command -nargs=? G call GitGrep(<f-args>)

def Vifm()
  # Get a list of filenames from Vifm
  var tmp = tempname()
  silent execute('silent !vifm --choose-files ' .. tmp)
  var mylist = readfile(tmp)
  call delete(tmp)

  # Vifm probably messed up the display
  redraw!

  # Replace the argument list
  if len(mylist) > 0
    :%argdelete
    for a in mylist
      # add at the end of the current argument list
      execute(":$argadd " .. fnameescape(a))
    endfor

    # Start editing the first file
    first!
  endif
enddef
command Vifm call Vifm()

def g:NetrwNewNamedFile()
  inputsave()
  feedkeys(strftime("%Y%m%d.txtODODODOD"))
  var fname = input('Enter vorg filename: ')
  inputrestore()
  execute "NetrwKeepj e " .. fnameescape(b:netrw_curdir .. "/" .. fname)
enddef

# from https://github.com/biosugar0/vim-popyank
def g:PopupToPreview(): void
    var popup = popup_list()
    if len(popup) > 0
      var p = popup[0]
      var winID = winbufnr(p)
      var pBuffer = getbufline(winID, 1, "$")
      popup_clear()
      if len(pBuffer) != 0
          var tmp = tempname()
          writefile(pBuffer, tmp)
          exec "pedit " .. tmp
          delete(tmp)
      endif
    endif
enddef
command PopupToPreview call g:PopupToPreview()
# }}}

# {{{ Mappings
nmap <Leader>d :SignifyDiff!<CR>
nmap <Leader>h :SignifyHunkDiff<CR>
nmap <Leader>s :SignifyToggle<CR>
nmap <Leader>b :TagbarToggle<CR>

nmap <Leader>1 :normal 1gt<CR>
nmap <Leader>2 :normal 2gt<CR>
nmap <Leader>3 :normal 3gt<CR>
nmap <Leader>4 :normal 4gt<CR>
nmap <Leader>5 :normal 5gt<CR>

nmap <silent> <Leader>- :Vifm<CR>
nmap <silent> - :Bufselect<CR>

nmap yoe :set invruler<CR>
nmap yof :if &fo =~ 'a' \| set fo-=at \| else \| set fo+=at \| endif<CR>

nmap <Ins> yop
nmap <Space> <C-w><C-w>
nnoremap Q :q<CR>

# hit leader twice to open menu
noremap <Leader><Leader> :call quickui#menu#open()<cr>

# Navigate the jumplist with <M-i> instead of <C-i> which is Tab.
# I've configured my terminal to send <M-i> for when i press <C-i>
nnoremap i <C-i>

# Scroll other windows using page up and page down
nnoremap <silent> <pageup> <c-w>p<c-y><c-w>w
nnoremap <silent> <pagedown> <c-w>p<c-e><c-w>w
inoremap <silent> <pageup> <C-[><c-w>p<c-y><c-w>wgi
inoremap <silent> <pagedown> <C-[><c-w>p<c-e><c-w>wgi

# Close the preview window from insert mode
inoremap <C-g><C-g> <C-o>:pclose<CR>
nnoremap <C-g><C-g> :pclose<CR>

# vsnip: Jump forward or backward
inoremap <expr>   <Tab> pumvisible() ? "\<C-n>" : vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)' : '<Tab>'
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'

# matchup
nmap <Leader>? :MatchupWhereAmI?<CR>

# vim-which-key

# vim-highlighter
nmap [h :Hi {<CR>
nmap ]h :Hi }<CR>
nmap [H :Hi <<CR>
nmap ]H :Hi ><CR>
# }}}

# {{{ Configure plugins

# Load packages
packadd! cfilter

# vimcomplete
var vcoptions = {
    alwaysOn: true,
    kindDisplayType: 'text',
    postfixClobber: true,
    postfixHighlight: false,
    sortByLength: false,
    showKind: true,
    recency: true,
    # dictionary: {
    #     enable: true,
    #     priority: 11,
    #     properties: {
    #         text: { sortedDict: true }
    #     }
    # }
    }
autocmd VimEnter * g:VimCompleteOptionsSet(vcoptions)

# ShowMarks
g:showmarks_enable = 0
g:showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

# ignore help, quickfix, non-modifiable buffers
g:showmarks_ignore_type = "h"

g:showmarks_textlower = "unicode"
g:showmarks_textupper = "unicode"

# hilight lower & upper marks
g:showmarks_hlline_lower = 1
g:showmarks_hlline_upper = 1 


# Markdown
var markdown_folding = 1


# NetRW
g:netrw_altv = 1
g:netrw_winsize = 20
g:netrw_preview = 1
g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
# g:netrw_liststyle = 3
# g:netrw_list_hide.=netrw_gitignore#Hide()


# Signify
var signify_disable_by_default = 0


# vim-lsp
packadd lsp
call LspAddServer([{
        name: 'golang',
        filetype: ['go', 'gomod'],
        path: '/usr/bin/gopls',
        args: ['serve'],
        syncInit: true
      },
      {
        name: 'python',
        filetype: ['python'],
        path: 'pylsp',
        args: []
      },
      # {
      #   name: 'shell',
      #   filetype: ['sh'],
      #   path: '/home/jiska/.local/bin/bash-lsp.sh',
      #   args: []
      # },
      # {
      #   name: 'Languagetool',
      #   filetype: ['text', 'markdown'],
      #   path: '/home/jiska/Code/ltex-ls/ltex-ls-16.0.0/bin/ltex-ls',
      #   args: [],
      #   syncInit: true
      # }
      ])

call LspOptionsSet({
      autoComplete: false,
      ignoreMissingServer: true,
      completionMatcher: 'case',
      showDiagOnStatusLine: true,
      showDiagInPopup: false,
      showSignature: false,
      echoSignature: true,
      showInlayHints: false,
      hoverInPreview: true,
      diagSignWarningText: '> ',
      diagSignInfoText: '- ',
      diagSignHintText: '+ ',
      diagSignErrorText: '>>',
      diagVirtualTextAlign: 'above',
      highlightDiagInline: false,
      ultisnipsSupport: false,
      vsnipSupport: false,
      snippetSupport: false,
      })

nnoremap <C-L>D <Cmd>LspGotoDefinition<CR>
nnoremap <C-L>I <Cmd>LspGotoImpl<CR>
nnoremap <C-L>T <Cmd>LspGotoTypeDef<CR>

nnoremap <C-L>d <Cmd>topleft LspPeekDefinition<CR>
nnoremap <C-L>i <Cmd>topleft LspPeekImpl<CR>
nnoremap <C-L>t <Cmd>topleft LspPeekTypeDef<CR>

nnoremap <C-L>s <Cmd>LspDocumentSymbol<CR>
nnoremap <C-L>r <Cmd>LspShowReferences<CR>

nnoremap <C-L><C-L> <Cmd>call LspOptionsSet(#{hoverInPreview: v:false})<bar>LspHover<CR>
nnoremap <C-L>l     <Cmd>call LspOptionsSet(#{hoverInPreview: v:true })<bar>LspHover<CR>

nnoremap [V <Cmd>LspDiagFirst<CR>
nnoremap [v <Cmd>LspDiagPrev<CR>
nnoremap ]v <Cmd>LspDiagNext<CR>
nnoremap ]V <Cmd>LspDiagLast<CR>

nnoremap <C-L>? <Cmd>LspShowSignature<CR>
nnoremap <C-L>/ <Cmd>LspDiagShow<CR>

autocmd User LspAttached setlocal tagfunc=lsp#lsp#TagFunc

# vim-indentwise

# vorg
var tagbar_type_vorg = {
      'sort': 0, 
      'sro': '""',
      'kind2scope': {
        'c': 'chapter',
        's': 'section',
        'S': 'subsection',
        't': 'subsubsection',
        'T': 'l3subsection',
        'u': 'l4subsection',
        'f': 'tag',
        'D': 'document tag',
      },
      'scope2kind': {
        'chapter': 'c',
        'section': 's',
        'subsection': 'S',
        'subsubsection': 't',
        'l3subsection': 'T',
        'l4subsection': 'u',
        'tag': 'f',
        'document tag': 'D',
      },
      'kinds': [
        'D:document',
        'c:chapter:0:1',
        's:section:0:1',
        'S:subsection:0:1',
        't:subsubsection:0:1',
        'T:l3subsection:0:1',
        'u:l4subsection:0:1',
        'f:tag',
      ]
      }
# }}}

# {{{ Autocommands

augroup tmux_clipboard
  autocmd!
  autocmd TextYankPost * if len(@") > 3 | call system("tmux load-buffer -", @") | endif
augroup END

# TODO: how to tell if the window contains a quickfix and location list?
augroup QuickFixHistory
  autocmd!
  autocmd BufWinEnter quickfix nnoremap <buffer> - <Cmd>colder<CR>
  autocmd BufWinEnter quickfix nnoremap <buffer> - <Cmd>lolder<CR>
augroup END

augroup netrw_mapping
  autocmd!
  autocmd FileType netrw nnoremap <buffer> & :call NetrwNewNamedFile()<CR>
augroup END

# Always wrap long lines in preview windows.
autocmd BufEnter * if &previewwindow | set wrap | endif
# }}}

#{{{ Quick menu

quickui#menu#reset()
g:quickui_border_style = 2
g:quickui_color_scheme = 'papercol_dark'

# items containing tips, tips will display in the cmdline
call quickui#menu#install('&Plugins', [
   [ "&Signify toggle\t\\s", 'SignifyToggle', 'Show linechanges in the gutter' ],
   [ "&Diff file\t\\d", 'SignifyDiff', 'Show diff in diff mode' ],
   [ "Diff &hunk\t\\h", 'SignifyHunkDiff', 'Show diff in a popup' ],
   ['--', '', '' ],
   ['Text stat&istics', 'call StylePrg()', 'runs GNU style on the current buffer' ],
   ['&Limelight', 'Limelight!!', 'Toggle limelight' ],
   ['&Unicoder', 'Unicoder', 'Use abbreviations to insert unicode characters'],
   ['Show &Marks', 'ShowMarksToggle', 'Highlight marks'],
   ['Tag&bar', 'TagbarToggle', 'Toggle tagbar' ],
   ['&Emmet', 'packadd emmet-vim', 'Enable emmet'],
   ])

# script inside %{...} will be evaluated and expanded in the string
call quickui#menu#install("&Options", [
   [ "&Paste\tyop", 'set invpaste'],
   [ "&Wrap\tyow", 'execute "normal yow"' ],
   [ "&Cursorline\tyoc", 'execute "normal yoc"' ],
   [ "C&ursorcolumn\tyou", 'execute "normal you"' ],
   [ "&Xrosshairs\tyox", 'execute "normal yox"' ],
   [ "&Background\tyob", 'execute "normal yob"' ],
   [ "&Hlsearch\tyoh", 'execute "normal yoh"' ],
   [ "&Ignorecase\tyoi", 'execute "normal yoi"' ],
   [ "&Diff\tyod", 'execute "normal yod"' ],
   [ "&List\tyol", 'execute "normal yol"' ],
   [ "&Number\tyon", 'execute "normal yon"' ],
   [ "&Relativenumber\tyor", 'execute "normal yor"' ],
   [ "&Spell\tyos", 'execute "normal yos"' ],
   [ "&Virtualedit\tyov", 'execute "normal yov"' ],
   [ "Rul&er\tyoe", 'set invruler' ],
   [ "\Auto format\tyof", "if &fo =~ 't' | set fo-=t | else | set fo+=t | endif"],
   [ "All options", 'options' ],
   ])

call quickui#menu#install("&LSP", [
   [ "Goto definition\t<C-l>D" ],
   [ "Goto implementation\t<C-l>I" ],
   [ "Goto type definition\t<C-l>T" ],
   [ "---" ],
   [ "Find document symbol\t<C-l>s" ],
   [ "Find references\t<C-l>r" ],
   [ "Documentation\t<C-l>l" ],
   ])

# register HELP menu with weight 10000
call quickui#menu#install('H&elp', [
   ["&Cheatsheet", 'help index', ''],
   ['T&ips', 'help tips', ''],
   ['--', ''],
   ["&Tutorial", 'help tutor', ''],
   ['Quick &reference', 'help quickref', ''],
   ['&Summary', 'help summary', ''],
   ], 10000)

# }}}

# {{{ Colors
execute "set t_8f=\e[38;2;%lu;%lu;%lum"
execute "set t_8b=\e[48;2;%lu;%lu;%lum"
set termguicolors

colorscheme new-moon
highligh link LspDiagSignWarningText Wildmenu
# }}}

# Make modified arrow keys (<C-Left> etc.) work in alacritty 
execute "set <xUp>=\<Esc>[@;*A"
execute "set <xDown>=\<Esc>[@;*B"
execute "set <xRight>=\<Esc>[@;*C"
execute "set <xLeft>=\<Esc>[@;*D"

# Try using Kitty keyboard protocol
# set kpc=alacritty:kitty
# vim: fdm=marker foldlevel=0 fileencoding=utf-8
